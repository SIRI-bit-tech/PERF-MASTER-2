# Generated by Django 5.2.5 on 2025-09-04 01:40

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIAnalysisResults',
            fields=[
                ('analysis_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('component_id', models.CharField(max_length=255)),
                ('bottlenecks', models.JSONField(default=list)),
                ('suggestions', models.JSONField(default=list)),
                ('confidence_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1)])),
                ('model_used', models.CharField(max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('processing_time', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'perfmaster_aianalysisresults',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OptimizationSuggestions',
            fields=[
                ('suggestion_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('memo', 'React.memo'), ('callback', 'useCallback'), ('usememo', 'useMemo'), ('lazy', 'Lazy Loading'), ('splitting', 'Code Splitting'), ('bundle', 'Bundle Optimization'), ('state', 'State Management'), ('rendering', 'Rendering Optimization')], max_length=20)),
                ('description', models.TextField()),
                ('code_changes', models.JSONField(default=dict)),
                ('impact_estimate', models.JSONField(default=dict)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('applied', 'Applied'), ('rejected', 'Rejected'), ('testing', 'Testing')], default='pending', max_length=20)),
                ('priority', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('applied_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('analysis', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='optimization_suggestions', to='perfmaster.aianalysisresults')),
            ],
            options={
                'db_table': 'perfmaster_optimizationsuggestions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('project_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('repository_url', models.URLField(blank=True, null=True)),
                ('framework_version', models.CharField(default='React 18', max_length=50)),
                ('performance_config', models.JSONField(default=dict)),
                ('ai_settings', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to=settings.AUTH_USER_MODEL)),
                ('team_members', models.ManyToManyField(blank=True, related_name='team_projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceSnapshots',
            fields=[
                ('snapshot_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('metrics_snapshot', models.JSONField()),
                ('components_snapshot', models.JSONField(default=list)),
                ('alerts_snapshot', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='snapshots', to='perfmaster.project')),
            ],
            options={
                'db_table': 'perfmaster_performancesnapshots',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='aianalysisresults',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_analyses', to='perfmaster.project'),
        ),
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(choices=[('light', 'Light'), ('dark', 'Dark'), ('auto', 'Auto')], default='auto', max_length=10)),
                ('email_notifications', models.BooleanField(default=True)),
                ('notification_frequency', models.CharField(choices=[('realtime', 'Real-time'), ('hourly', 'Hourly'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('never', 'Never')], default='daily', max_length=10)),
                ('dashboard_layout', models.JSONField(default=dict)),
                ('alert_thresholds', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'perfmaster_userpreferences',
            },
        ),
        migrations.CreateModel(
            name='PerformanceMetrics',
            fields=[
                ('metric_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('component_path', models.CharField(max_length=500)),
                ('render_time', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('memory_usage', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('bundle_size', models.FloatField(validators=[django.core.validators.MinValueValidator(0)])),
                ('core_web_vitals', models.JSONField(default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('cpu_usage', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('network_requests', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('dom_nodes', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='perfmaster.project')),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['project', 'timestamp'], name='perfmaster__project_a45822_idx'), models.Index(fields=['component_path'], name='perfmaster__compone_74b7e9_idx')],
            },
        ),
        migrations.CreateModel(
            name='PerformanceAlerts',
            fields=[
                ('alert_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('component_path', models.CharField(blank=True, max_length=500, null=True)),
                ('alert_type', models.CharField(choices=[('lcp_threshold', 'LCP Threshold Exceeded'), ('fid_threshold', 'FID Threshold Exceeded'), ('cls_threshold', 'CLS Threshold Exceeded'), ('memory_leak', 'Memory Leak Detected'), ('bundle_size', 'Bundle Size Exceeded'), ('error_rate', 'High Error Rate')], max_length=20)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=10)),
                ('message', models.TextField()),
                ('metric_value', models.FloatField(blank=True, null=True)),
                ('threshold_value', models.FloatField(blank=True, null=True)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='perfmaster.project')),
            ],
            options={
                'db_table': 'perfmaster_performancealerts',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['project', 'is_resolved', 'created_at'], name='perfmaster__project_e1f566_idx'), models.Index(fields=['alert_type', 'severity'], name='perfmaster__alert_t_6ee7e6_idx')],
            },
        ),
        migrations.CreateModel(
            name='ComponentAnalysis',
            fields=[
                ('analysis_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('file_path', models.CharField(max_length=500)),
                ('component_name', models.CharField(max_length=255)),
                ('component_type', models.CharField(choices=[('react_component', 'React Component'), ('vue_component', 'Vue Component'), ('angular_component', 'Angular Component'), ('vanilla_js', 'Vanilla JavaScript'), ('typescript', 'TypeScript')], max_length=20)),
                ('performance_score', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('optimization_opportunities', models.JSONField(default=list)),
                ('dependencies', models.JSONField(default=list)),
                ('analysis_metadata', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='component_analyses', to='perfmaster.project')),
            ],
            options={
                'db_table': 'perfmaster_componentanalysis',
                'ordering': ['-created_at'],
                'unique_together': {('project', 'file_path')},
            },
        ),
    ]
